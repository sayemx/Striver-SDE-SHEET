Problem Link -> https://www.codingninjas.com/studio/problems/boundary-traversal-of-binary-tree_8230712?challengeSlug=striver-sde-challenge

import java.util.* ;
import java.io.*; 
/************************************************************

    Following is the Binary Tree node structure:
    
   class TreeNode {
	    int data;
	    TreeNode left;
	    TreeNode right;

	    TreeNode(int data) {
		    this.data = data;
		    this.left = null;
		    this.right = null;
	    }

    }

************************************************************/

import java.util.ArrayList;

public class Solution {
	public static ArrayList<Integer> traverseBoundary(TreeNode root){
		ArrayList<Integer> ans = new ArrayList<>();
		if(root == null) return ans;
		ans.add(root.data);
		if(root.left == null && root.right == null) return ans;
		leftBoundary(root, ans);
		leafNodes(root, ans);
		rightBoundary(root, ans);

		return ans;
	}
	public static void leafNodes(TreeNode root, ArrayList<Integer> ans){
		if(root == null) return;
		if(root.left == null && root.right == null){
			ans.add(root.data);
			return;
		}
		leafNodes(root.left, ans);
		leafNodes(root.right, ans);
	}
	public static void leftBoundary(TreeNode root, ArrayList<Integer> ans){
		TreeNode cur = root.left;
		while(cur != null){
			if(cur.left != null || cur.right != null){
				ans.add(cur.data);
			}
			if(cur.left != null){
				cur = cur.left;
			}else{
				cur = cur.right;
			}
		}
	}
	public static void rightBoundary(TreeNode root, ArrayList<Integer> ans){
		TreeNode cur = root.right;
		ArrayList<Integer> tempAns = new ArrayList<>();
		while(cur != null){
			if(cur.left != null || cur.right != null){
				tempAns.add(cur.data);
			}
			if(cur.right != null){
				cur = cur.right;
			}else{
				cur = cur.left;
			}
		}
		Collections.reverse(tempAns);
		ans.addAll(tempAns);
	}
}
