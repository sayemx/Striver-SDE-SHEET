// Code to find DFS Traversal of an Undirected Graph

public class Solution {
    public static ArrayList<ArrayList<Integer>> depthFirstSearch(int v, int e, ArrayList<ArrayList<Integer>> edges) {
        boolean vis[] = new boolean[v];
        ArrayList<ArrayList<Integer>> ans = new ArrayList<>();
        ArrayList<ArrayList<Integer>> adj = new ArrayList<>();
        for(int i=0; i<v; i++) adj.add(new ArrayList<>());
        for(int i=0; i<e; i++){
            int src = edges.get(i).get(0);
            int des = edges.get(i).get(1);
            adj.get(src).add(des);
            adj.get(des).add(src);
        }
        for(int i=0; i<v; i++){
            ArrayList<Integer> temp = new ArrayList<>();
            if(!vis[i]){
                dfs(i, adj, temp, vis);
            }
            if(temp.size() > 0)
                ans.add(temp);
        }
        return ans;
    }
    public static void dfs(int node, ArrayList<ArrayList<Integer>> adj, 
        ArrayList<Integer> temp, boolean []vis){
        temp.add(node);
        vis[node] = true;
        for(int adjNode : adj.get(node)){
            if(!vis[adjNode]){
                dfs(adjNode, adj, temp, vis);
            }
        }
    }
}
