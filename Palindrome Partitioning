Problem Link -> https://www.codingninjas.com/studio/problems/palindrome-partitioning_8230726?challengeSlug=striver-sde-challenge

import java.util.* ;
import java.io.*; 
public class Solution {
    public static List<List<String>> partition(String s) {
        List<List<String>> ans = new ArrayList<>();
        List<String> path = new ArrayList<>();
        partition(0, s, path, ans);
        return ans;
    }
    public static void partition(int index, String s, List<String> path, List<List<String>> ans){
        if(index == s.length()){
            ans.add(new ArrayList<>(path));
            return;
        }
        for(int i=index; i<s.length(); i++){
            if(isPal(s, index, i)){
                path.add(s.substring(index, i+1));
                partition(i+1, s, path, ans);
                path.remove(path.size()-1);
            }
        }
    }
    public static boolean isPal(String s, int start, int end){
        while(start <= end){
            if(s.charAt(start) != s.charAt(end)) return false;
            start++; end--;
        }
        return true;
    }
}
