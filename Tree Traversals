Problem Link -> https://www.codingninjas.com/studio/problems/tree-traversals_8230775?challengeSlug=striver-sde-challenge

import java.util.* ;
import java.io.*; 
/************************************************************

	Following is the Binary Tree node structure:

	class BinaryTreeNode<T> {
	    T data;
	    BinaryTreeNode<T> left;
	    BinaryTreeNode<T> right;

	    public BinaryTreeNode(T data) {
	        this.data = data;
	    }
	}

************************************************************/

public class Solution {
    public static List<List<Integer>> getTreeTraversal(BinaryTreeNode<Integer> root) {
        List<Integer> pre = new ArrayList<>();
		List<Integer> ino = new ArrayList<>();
		List<Integer> pos = new ArrayList<>();
		List<List<Integer>> ans = new ArrayList<>();
		for(int i=0; i<3; i++) ans.add(new ArrayList<>());
		if(root == null) return ans;
		Stack<Pair> st = new Stack<>();
		st.push(new Pair(root, 1));
		while(!st.isEmpty()){
			Pair p = st.pop();
			BinaryTreeNode node = p.node;
			if(p.num == 1){
				pre.add((int)node.data);
				p.num++;
				st.push(p);
				if(node.left != null){
					st.push(new Pair(node.left, 1));
				}
			}else if(p.num == 2){
				ino.add((int)node.data);
				p.num++;
				st.push(p);
				if(node.right != null){
					st.push(new Pair(node.right, 1));
				}
			}else{
				pos.add((int)node.data);
			}
		}
		
		ans.add(ino);
		ans.add(pre);
		ans.add(pos);
		return ans;
    }
}

class Pair{
	BinaryTreeNode<Integer> node;
	int num;
	Pair(BinaryTreeNode node, int num){
		this.node = node;
		this.num = num;
	}
}

